// Constants
package main

type FilterType int

const (
	FILTER_DENY FilterType = iota
	FILTER_ALLOW
	FILTER_MODIFY
	FILTER_ACTION_REPLACE
	FILTER_ACTION_EXECUTE_BEFORE
	FILTER_ACTION_EXECUTE_AFTER
)

type FilterSourcePrototype int

const (
	FILTER_SOURCE_PARAMETER_PLAYER FilterSourcePrototype = iota
	FILTER_SOURCE_PARAMETER_PROPERTY 
	FILTER_SOURCE_PARAMETER_SOURCE_CREATURE
	FILTER_SOURCE_PARAMETER_TARGET_CREATURE
	FILTER_SOURCE_PARAMETER_CREATURE
	FILTER_SOURCE_PARAMETER_TRAIT
	FILTER_SOURCE_PARAMETER_ALL_PLAYERS
)

func (t FilterSourcePrototype) GoString() string {
	switch t {
		case FILTER_SOURCE_PARAMETER_PLAYER:
			return "Player"
		case FILTER_SOURCE_PARAMETER_PROPERTY:
			return "Property"
		case FILTER_SOURCE_PARAMETER_SOURCE_CREATURE:
			return "Source creature"
		case FILTER_SOURCE_PARAMETER_TARGET_CREATURE:
			return "Target creature"
		case FILTER_SOURCE_PARAMETER_CREATURE:
			return "Creature"
		case FILTER_SOURCE_PARAMETER_TRAIT:
			return "Trait"
		case FILTER_SOURCE_PARAMETER_ALL_PLAYERS:
			return "All players"
		default:
			return string(t)
	}
}

type TraitType int

const (
	TRAIT_PASS TraitType = iota
	TRAIT_NEXT_PLAYER
	TRAIT_TOOK_FOOD
	TRAIT_SHART_VISION
	TRAIT_CAMOUFLAGE
	TRAIT_BURROWING
	TRAIT_FED
	TRAIT_PAIR
	TRAIT_FAT_TISSUE
	TRAIT_FOOD
	TRAIT_ADDITIONAL_FOOD
	TRAIT_FAT
	TRAIT_SIMBIOSYS
)

func (t TraitType) GoString() string {
	switch t {
		case TRAIT_PASS:
			return "Pass"
		case TRAIT_NEXT_PLAYER:
			return "Next player turn"
		case TRAIT_TOOK_FOOD:
			return "Already took food"
		case TRAIT_SHART_VISION:
			return "Sharp vision"
		case TRAIT_CAMOUFLAGE:
			return "Camouflage"
		case TRAIT_BURROWING:
			return "Burrowing"
		case TRAIT_FED:
			return "Fed"
		case TRAIT_PAIR:
			return "Pair"
		case TRAIT_SIMBIOSYS:
			return "Simbiosys"
		case TRAIT_FAT_TISSUE:
			return "Fat tissue"
		case TRAIT_FOOD:
			return "Food"
		case TRAIT_ADDITIONAL_FOOD:
			return "Additional food"
		case TRAIT_FAT:
			return "Fat"
		default:
			return string(t)
	}
}

type SourcePrototype int

const (
	SOURCE_PROTOTYPE_NONE SourcePrototype = iota
	SOURCE_PROTOTYPE_CREATURES_PAIR
	SOURCE_PROTOTYPE_PROPERTY
	SOURCE_PROTOTYPE_PLAYER_CREATURE_PROPERTY
	SOURCE_PROTOTYPE_PLAYER_CARD
	SOURCE_PROTOTYPE_PLAYER_CARD_PROPERTY
	SOURCE_PROTOTYPE_OPPONENT_CARD
	SOURCE_PROTOTYPE_PLAYER
	SOURCE_PROTOTYPE_OPPONENT
	SOURCE_PROTOTYPE_ANY_PLAYER
	SOURCE_PROTOTYPE_PLAYER_CREATURE
	SOURCE_PROTOTYPE_DECK
	SOURCE_PROTOTYPE_OWN_CREATURE
	SOURCE_PROTOTYPE_DESK
)

type PhaseType int

const (
	PHASE_DEVELOPMENT PhaseType = iota
	PHASE_FOOD_BANK_DETERMINATION
	PHASE_FEEDING
	PHASE_EXTINCTION
)

type ActionType int

const (
	ACTION_SEQUENCE ActionType = iota
	ACTION_START_TURN
	ACTION_NEXT_PLAYER
	ACTION_ADD_CREATURE
	ACTION_ADD_SINGLE_PROPERTY
	ACTION_ADD_PAIR_PROPERTY
	ACTION_PASS
	ACTION_NEW_PHASE
	ACTION_ADD_TRAIT
	ACTION_REMOVE_TRAIT
	ACTION_ADD_FILTER
	ACTION_ATTACK
	ACTION_DETERMINE_FOOD_BANK
)

type ArgumentName int

const (
	PARAMETER_PROPERTY ArgumentName = iota
	PARAMETER_PHASE
	PARAMETER_PLAYER
	PARAMETER_PAIR
	PARAMETER_CARD
	PARAMETER_ACTIONS_SEQUENCE
	PARAMETER_CREATURE
	PARAMETER_TRAIT
	PARAMETER_SOURCE
	PARAMETER_FILTER
	PARAMETER_SOURCE_CREATURE
	PARAMETER_TARGET_CREATURE
)