var game = new Phaser.Game(800, 600, Phaser.AUTO, 'game_holder', { preload: preload, create: create, update: update, render: render});var hand = null;var chosenSprite = nullfunction preload() {	game.load.spritesheet('cards','assets/spritesheet.png',182,254,20);}function create() {	game.physics.startSystem(Phaser.Physics.ARCADE);	hand = game.add.group();	hand.x = 0;	hand.y = 400;}function update() {	if (hand!= null) {		hand.forEach(function(card) {			if (card.input.overDuration() > 500 && !card.input.isDragged) {				if (!card.flipped) {                	card.scale.y = 1;                	card.scale.x = 1;                } else {                	card.scale.x = -1;                	card.scale.y = -1;                }			}		}, this);	}}function render() {	if (chosenSprite != null) {		game.debug.spriteInputInfo(chosenSprite, 32, 32);	}}var socket = new WebSocket("ws://127.0.0.1:8080/client");socket.onopen = function() {	var textArea = document.getElementById("log");    textArea.value = "";};socket.onmessage = function(event) {	var textArea = document.getElementById("log");	textArea.value = textArea.value + '\n' + event.data;	textArea.scrollTop = textArea.scrollHeight;	var obj = JSON.parse(event.data);	if (obj.Type == 0) {		showAction(obj.Value);	}};function showAction(action) {	updateGameState(action.State)}function updateGameState(state) {	updateHand(state.PlayerCards);}function updateHand(handDTO) {	hand.removeAll();	var y = 80/2;	var offset = game.width/(handDTO.length+1);	for (var i in handDTO) {		hand.add(new Card(handDTO[i], offset + i*offset, y));	}}function cardOver(card, pointer) {	chosenSprite = card;	card.bringToTop();}function cardUp(card, pointer) {	if (card.input.pointerTimeUp()-card.input.pointerTimeDown() < 70) {		card.flipped = !card.flipped;		card.scale.y *= -1;		card.scale.x *= -1;	}}function cardOut(card, pointer) {	card.anchor.y = 0.5;	if (!card.flipped) {    	card.scale.setTo(0.5, 0.5);    } else {    	card.scale.setTo(-0.5, -0.5);    }}function cardDragStart(card) {	card.anchor.y = 0.5;	if (!card.flipped) {    	card.scale.setTo(0.5, 0.5);    } else {    	card.scale.setTo(-0.5, -0.5);    }}function cardDragStop(card) {	card.position = card.input.dragStartPoint.clone();}function cardDragUpdate(card) {}Card = function(cardDTO, x, y) {	Phaser.Sprite.call(this, game, x, y, 'cards');	this.anchor.setTo(0.5, 0.5);	this.scale.setTo(0.5, 0.5);	game.physics.arcade.enable(this);    this.inputEnabled = true;    this.input.enableDrag();    this.id = cardDTO.Id;    this.properties = cardDTO.Properties;    this.events.onInputOver.add(cardOver, this);    this.events.onInputOut.add(cardOut, this);    this.events.onInputUp.add(cardUp, this);    this.events.onDragStart.add(cardDragStart, this);    this.events.onDragStop.add(cardDragStop, this);    this.events.onDragUpdate.add(cardDragUpdate, this);    this.flipped = false;    if ($.inArray("Communication", this.properties[0].Traits) != -1) {		this.frame = 0;	} else if ($.inArray("High body weight", this.properties[0].Traits) != -1 && $.inArray("Fat tissue", this.properties[1].Traits) != -1) {	 	this.frame = 1;	} else if ($.inArray("High body weight", this.properties[0].Traits) != -1 && $.inArray("Carnivorous", this.properties[1].Traits) != -1) {        this.frame = 2;    } else if ($.inArray("Sharp vision", this.properties[0].Traits) != -1) {        this.frame = 3;    } else if ($.inArray("Grazing", this.properties[0].Traits) != -1) {        this.frame = 4;    } else if ($.inArray("Parasite", this.properties[0].Traits) != -1 && $.inArray("Carnivorous", this.properties[1].Traits) != -1) {      	this.frame = 5;    } else if ($.inArray("Burrowing", this.properties[0].Traits) != -1) {        this.frame = 6;    } else if ($.inArray("Cooperation", this.properties[0].Traits) != -1 && $.inArray("Carnivorous", this.properties[1].Traits) != -1) {      	this.frame = 7;    } else if ($.inArray("Cooperation", this.properties[0].Traits) != -1 && $.inArray("Fat tissue", this.properties[1].Traits) != -1) {    	this.frame = 8;    } else if ($.inArray("Poisonous", this.properties[0].Traits) != -1) {    	this.frame = 9;    } else if ($.inArray("Camouflage", this.properties[0].Traits) != -1) {        this.frame = 10;    } else if ($.inArray("Hibernation", this.properties[0].Traits) != -1) {        this.frame = 11;    } else if ($.inArray("Mimicry", this.properties[0].Traits) != -1) {        this.frame = 12;    } else if ($.inArray("Symbiosys", this.properties[0].Traits) != -1) {        this.frame = 13;    } else if ($.inArray("Scavenger", this.properties[0].Traits) != -1) {       this.frame = 14;    } else if ($.inArray("Piracy", this.properties[0].Traits) != -1) {       this.frame = 15;    } else if ($.inArray("Tail loss", this.properties[0].Traits) != -1) {       this.frame = 16;    } else if ($.inArray("Running", this.properties[0].Traits) != -1) {       this.frame = 17;    } else if ($.inArray("Swimming", this.properties[0].Traits) != -1) {       this.frame = 18;    } else if ($.inArray("Parasite", this.properties[0].Traits) != -1 && $.inArray("Fat tissue", this.properties[1].Traits) != -1) {       this.frame = 19;    } else {    	alert("Unknown card");    }    game.add.existing(this)};Card.prototype = Object.create(Phaser.Sprite.prototype);Card.prototype.constructor = Card;function myOnKeyPress(e) {	if (e.keyCode == 13) {		var command = document.getElementById("command").value		socket.send(command)		var textArea = document.getElementById("log")		textArea.value = textArea.value + '\n' + command		document.getElementById("command").value = ""		return false	}};